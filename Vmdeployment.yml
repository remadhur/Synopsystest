# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'
    
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Deployment_Virtual_Machine'
    backendServiceArm: 'Microsoft Azure Internal Consumption'
    backendAzureRmResourceGroupName: 'Terraformpractice'
    backendAzureRmStorageAccountName: 'terraformstatesaas'
    backendAzureRmContainerName: 'terraform'
    backendAzureRmKey: 'terraform03.tfstate'
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Deployment_Virtual_Machine'
    environmentServiceNameAzureRM: 'Microsoft Azure Internal Consumption'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '(System.DefaultWorkingDirectory)/Deployment_Virtual_Machine'
    environmentServiceNameAzureRM: 'Microsoft Azure Internal Consumption'

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Microsoft Azure Internal Consumption'
    KeyVaultName: $(AzureKeyVault)
    SecretsFilter: '*'
    RunAsPreJob: true

- task: CmdLine@2
  inputs:
    script: |
      echo Hello world
      echo $(akvsecretname) > linuxsshkey.pem
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $personalToken = "s6walyz36akhapyt25l54qhcmikkpcwe4wjynndjbm5qfxu4z23a"
          $organisation = "Synopsys-Saas"
          $ProjectName = "SaaS-lightning"
          $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($personalToken)")) }
          $UriOrga = "https://$($organisation).visualstudio.com/" 
          $UriOrga
          $uriAccount = $UriOrga + "_apis/projects?api-version=6.0"
          $response = Invoke-RestMethod -Uri $uriAccount -Method get -Headers $AzureDevOpsAuthenicationHeader
          $Project = $response.value | where { $_.Name -eq $projectName }
          $id = $Project.id

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $pat="s6walyz36akhapyt25l54qhcmikkpcwe4wjynndjbm5qfxu4z23a"
       $SecureNameFile2Upload="linuxsshkey.pem"
       $SecureNameFilePath2Upload="$(Build.ArtifactStagingDirectory)/linuxsshkey.pem"
       $base64AuthInfo=[Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "",$pat)))
          $uploadSecureFileURI="https://dev.azure.com//Synopsys-Saas/SaaS-lightning/_apis/distributedtask/securefiles?api-version=5.0-preview.1&name=$SecureNameFile2Upload"
          $headers = @{
              Authorization=("Basic {0}" -f $base64AuthInfo)
          }
          Invoke-RestMethod -Uri $uploadSecureFileURI -Method Post -ContentType "application/octet-stream" -Headers $headers -InFile "$SecureNameFilePath2Upload"
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $token = "s6walyz36akhapyt25l54qhcmikkpcwe4wjynndjbm5qfxu4z23a"
           $hostipaddress="10.1.0.4"
           $privatekey="$(akvsecretname)"
           $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user,$token)))
           $org = "Synopsys-Saas"
           $Project = "SaaS-lightning"
           $restApiRunBuild = "https://dev.azure.com/$org/$project/_apis/serviceendpoint/endpoints?api-version=5.0-preview.2"
           $bodyjson = @{
                        "data"= @{
                               "Host"= "10.1.0.4"
                               "Port"= "22"
                               "PrivateKey"=$(akvsecretname)
                                  }
                       "type" ="ssh"
                       "name"= "sshServiceEndpoint"
                       "description" =  "Creation of SSH connection for linux virtaul machine"
                       "authorization"=@{
                             "parameters"= @{
                             username="demouser"
                             }
                              "scheme"=  "UsernamePassword"
                             }
                       "isShared"= "false"
                       "isReady"= "true"
                       "owner" = "Library"
                        "serviceEndpointProjectReferences"= @{
                        "projectReference"=@{
                          "id"= $id
                          "name"= $project
              }
      }
      } | ConvertTo-Json
      
      function InvokePostReques ($PostUrl, $body)
      {
      Write-Host $PostUrl
      Write-Host "======================"
      Write-Host $body
      return Invoke-RestMethod -Uri $PostUrl -Method Post -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Body $body
      }
      $result = InvokePostReques $restApiRunBuild $bodyjson

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'Vmconfiguration'
    publishLocation: 'pipeline'





    


