# -- pipline for Virtual Machine Infrastructure Deployment

trigger: none

name: Infrastructure Deployment - ${{ parameters.Environment }}-${{ parameters.location }}

#-- Parameters
parameters:
- name: Environment
  type: string
  default: dev

- name: TerraformDirectory
  type: string
  default: 'Deployment_Virtual_Machine'

- name: TerraformVersion
  type: string
  default: '0.15.3'

- name: location
  type: string
  default: Southeast Asia

- name: locationshortprefix
  type: string
  default: sa

#  Terraform Storage Provision should be enabled for the first time run of piplinline
- name: provisionStorage
  type: boolean
  default: false
  values:
  - true
  - false


variables:
- group: Dev-Secrets

stages:
- stage: Terraform_Plan_${{ parameters.Environment }}
  displayName: Plan ${{ parameters.Environment }}
  jobs:
  - job: Terraform_Plan
    displayName: Plan Terraform
    pool:
      vmImage: ubuntu-latest
    steps:
    # Instaling terraform
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: ${{ parameters.TerraformVersion }}
        
    # Terraform init
    - task: AzureCLI@1
      displayName: "Terraform Init"
      inputs:
       azureSubscription: $"(AzureSubscriptionServiceConnectionName)""
       scriptLocation: 'inlineScript'
       inlineScript: |
        set -eux  # fail on error
        subscriptionId=$(az account show --query id -o tsv)
        echo "Terraform Init"
        terraform init -input=false \
        -backend-config="resource_group_name=$"(tf-resourcegroup)" \
        -backend-config="storage_account_name=$"(tf-storageaccount)" \
        -backend-config="container_name=$"(tf-containername)" \
        -backend-config="key=$"(tf-statekey)" \
        -backend-config="subscription_id=$(subscription-id)" \
        -backend-config="tenant_id=$(tenant-id)" \
        -backend-config="client_id=$(spn-id)" \
        -backend-config="client_secret=$(spn-secret)"
       workingDirectory: ${{ parameters.TerraformDirectory }}
       addSpnToEnvironment: true

